#!/bin/sh

pkgname=firefox
pkgver=86.0
pkgrel=8

_changeset=353628fec415324ca6aa333ab6c47d447ecc128e
_changeset_tag=FIREFOX_86_0_RELEASE

# Google API keys (see http://www.chromium.org/developers/how-tos/api-keys)
# Note: These are for Arch Linux use ONLY. For your own distribution, please
# get your own set of keys. Feel free to contact foutrelis@archlinux.org for
# more information.
_google_api_key=AIzaSyDwr302FpOSkGRpLlUpPThNTDPbXcIn_FM

# Mozilla API keys (see https://location.services.mozilla.com/api)
# Note: These are for Arch Linux use ONLY. For your own distribution, please
# get your own set of keys. Feel free to contact heftig@archlinux.org for
# more information.
_mozilla_api_key=16674381-f021-49de-8622-3021c5942aff

function checkout_ff
{
	hg pull
	hg revert --all
	hg checkout $_changeset_tag
}

function patch_ff
{
	hg import ../0001-xul-layout.patch
	hg import ../0002-ctrl-slash-auto-hide.patch
	hg import ../0003-fix-url-bar-styles.patch
	hg import ../0004-hack-clipboard.patch
	hg import ../0005-use-std-size_t.patch
	#hg import ../48f46a7eada9
}

function build_ff
{
	checkout_ff
	patch_ff

	echo -n "$_google_api_key" >google-api-key
	echo -n "$_mozilla_api_key" >mozilla-api-key

	export MOZ_SOURCE_REPO=https://hg.mozilla.org/comm-central

  cat >../mozconfig <<END
ac_add_options --enable-application=browser
mk_add_options MOZ_OBJDIR=${PWD@Q}/obj
ac_add_options --prefix=/usr
ac_add_options --enable-release
ac_add_options --enable-hardening
ac_add_options --enable-optimize
ac_add_options --enable-rust-simd
ac_add_options --enable-linker=lld
ac_add_options --disable-elf-hack
export CC='clang --target=x86_64-unknown-linux-gnu'
export CXX='clang++ --target=x86_64-unknown-linux-gnu'
export AR=llvm-ar
export NM=llvm-nm
export RANLIB=llvm-ranlib
# Branding
ac_add_options --enable-official-branding
ac_add_options --enable-update-channel=release
ac_add_options --with-distribution-id=org.archlinux
ac_add_options --with-unsigned-addon-scopes=app,system
ac_add_options --allow-addon-sideload
export MOZILLA_OFFICIAL=1
export MOZ_APP_REMOTINGNAME=${pkgname//-/}
export MOZ_TELEMETRY_REPORTING=1
export MOZ_REQUIRE_SIGNING=1
# Keys
ac_add_options --with-google-location-service-api-keyfile=${PWD@Q}/google-api-key
ac_add_options --with-google-safebrowsing-api-keyfile=${PWD@Q}/google-api-key
ac_add_options --with-mozilla-api-keyfile=${PWD@Q}/mozilla-api-key
# System libraries
ac_add_options --with-system-nspr
ac_add_options --with-system-nss
# Features
ac_add_options --enable-alsa
ac_add_options --enable-jack
ac_add_options --enable-crashreporter
ac_add_options --disable-updater
ac_add_options --disable-tests
END

	export MOZ_NOSPAM=1
	export MOZBUILD_STATE_PATH="/media/dev/firefox-goobuntu/mozbuild"
	export MOZ_ENABLE_FULL_SYMBOLS=0
	export MACH_USE_SYSTEM_PYTHON=1

	# LTO needs more open files
	ulimit -n 4096

	# Do 3-tier PGO
	echo "Building instrumented browser..."
cat >.mozconfig ../mozconfig - <<END
ac_add_options --enable-profile-generate=cross
END

	./mach build
	if [ $? -ne 0 ]; then
		echo "Aborting..."
		exit 0
	fi

	echo "Profiling instrumented browser..."
	./mach package
	LLVM_PROFDATA=llvm-profdata \
	JARLOG_FILE="$PWD/jarlog" \
	xvfb-run -s "-screen 0 1920x1080x24 -nolisten local" \
	./mach python build/pgo/profileserver.py

	stat -c "Profile data found (%s bytes)" merged.profdata
	test -s merged.profdata

	stat -c "Jar log found (%s bytes)" jarlog
	test -s jarlog

	echo "Removing instrumented browser..."
	./mach clobber

	 echo "Building optimized browser..."
cat >.mozconfig ../mozconfig - <<END
ac_add_options --enable-lto=cross
ac_add_options --enable-profile-use=cross
ac_add_options --with-pgo-profile-path=${PWD@Q}/merged.profdata
ac_add_options --with-pgo-jarlog=${PWD@Q}/jarlog
END

	./mach build
}

function package_ff
{
	./mach package

	echo "./obj/dist/"
	ls -la ./obj/dist/*
}

function clean_ff
{
	rm -fr ./obj-x86_64-pc-linux-gnu
}

case "z$1" in
	"zb")
		build_ff
		;;
	"zp")
		package_ff
		;;
	"zc")
		clean_ff
		;;
	*)
		build_ff
		;;
esac
